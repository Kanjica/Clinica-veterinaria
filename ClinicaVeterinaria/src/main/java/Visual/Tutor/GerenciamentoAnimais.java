    
package Visual.Tutor;

import Visual.*;

import Visual.Tutor.SolicitarConsulta;
import Visual.Adm.CadastroVeterinarios;
import com.mycompany.clinicaveterinaria.*;
import java.awt.Window;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
/**
 *
 * @author pauli
 */
public class GerenciamentoAnimais extends javax.swing.JPanel {
    private Clinica petShop;
    private Tutor dono;
    private AnimalTableModel animalTableModel;
    private List<Animal> listaDeAnimais = new ArrayList<>();
    private boolean estado = false; // pra checkbox começar não visível
    
    public GerenciamentoAnimais(Clinica clinica, Tutor dono) {
        initComponents();
        this.petShop = clinica;
        this.dono = dono;
        
        listaDeAnimais = dono.getlistaAnimais(); // carregando os animais
        animalTableModel = new AnimalTableModel(listaDeAnimais); // criando uma instancia que recebe a lista
        tabelaAnimais.setModel(animalTableModel); // passando pra tabela
        tabelaAnimais.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        tabelaAnimais.getTableHeader().setReorderingAllowed(false); // impede reordenação de colunas
        
        vacinasComboBox.setVisible(false);
        aplicarVacinaJButton.setVisible(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        editarButton = new javax.swing.JButton();
        Voltar = new javax.swing.JButton();
        agendaAnimal = new javax.swing.JButton();
        vacinarButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaAnimais = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        vacinasComboBox = new javax.swing.JComboBox<>();
        aplicarVacinaJButton = new javax.swing.JButton();
        agendarConsulta = new javax.swing.JButton();
        solicitarConsulta = new javax.swing.JButton();
        CadastrarAnimal = new javax.swing.JButton();
        HistoricoAnimal = new javax.swing.JButton();
        proximasVacinas = new javax.swing.JButton();
        removerAnimal1 = new javax.swing.JButton();
        agendaAnimal1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();

        jButton1.setText("Voltar");

        setBackground(new java.awt.Color(106, 27, 154));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        editarButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        editarButton.setText("Editar");
        editarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
                editarButtonActionPerformed(evt);
            }
        });

        Voltar.setText("Voltar");
        Voltar.setMaximumSize(new java.awt.Dimension(60, 30));
        Voltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VoltarActionPerformed(evt);
            }
        });

        agendaAnimal.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        agendaAnimal.setText("Cartão Vacina");
        agendaAnimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agendaActionPerformed(evt);
            }
        });

        vacinarButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        vacinarButton.setText("Vacinar");
        vacinarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VacinarActionPerformed(evt);
            }
        });

        tabelaAnimais.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabelaAnimais.setMaximumSize(new java.awt.Dimension(400, 200));
        jScrollPane1.setViewportView(tabelaAnimais);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Minha Lista de Animais");

        vacinasComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        vacinasComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        aplicarVacinaJButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        aplicarVacinaJButton.setText("Aplicar a Vacina");
        aplicarVacinaJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aplicarVacinaJButtonActionPerformed(evt);
            }
        });

        agendarConsulta.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        agendarConsulta.setText("Agendar Consulta");
        agendarConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agendarConsultaActionPerformed(evt);
            }
        });

        solicitarConsulta.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        solicitarConsulta.setText("Solicitar Consulta");
        solicitarConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solicitarConsultaActionPerformed(evt);
            }
        });

        CadastrarAnimal.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CadastrarAnimal.setText("Cadastrar Animal");
        CadastrarAnimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CadastrarAnimalActionPerformed(evt);
            }
        });

        HistoricoAnimal.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        HistoricoAnimal.setText("Historico do Animal");
        HistoricoAnimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistoricoAnimalActionPerformed(evt);
            }
        });

        proximasVacinas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        proximasVacinas.setText("Próximas Doses");
        proximasVacinas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proximasVacinasVacinarActionPerformed(evt);
            }
        });

        removerAnimal1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        removerAnimal1.setText("Remover");
        removerAnimal1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerAnimal1RemoverActionPerformed(evt);
            }
        });

        agendaAnimal1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        agendaAnimal1.setText("Agenda");
        agendaAnimal1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agendaAnimal1agendaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(vacinasComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(aplicarVacinaJButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(solicitarConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CadastrarAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(agendarConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(agendaAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(HistoricoAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(60, 60, 60))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Voltar, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vacinarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(proximasVacinas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(agendaAnimal1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(removerAnimal1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(editarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(vacinasComboBox)
                            .addComponent(aplicarVacinaJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(vacinarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(proximasVacinas, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(agendaAnimal1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Voltar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removerAnimal1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(2, 2, 2)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(CadastrarAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(solicitarConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(agendarConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HistoricoAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(agendaAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        proximasVacinas.getAccessibleContext().setAccessibleDescription("");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Gerenciar Animais");

        jLabel32.setIcon(new javax.swing.JLabel() {
            public javax.swing.Icon getIcon() {
                try {
                    return new javax.swing.ImageIcon(
                        new java.net.URL("https://i.imgur.com/Ifajv0U.png")
                    );
                } catch (java.net.MalformedURLException e) {
                }
                return null;
            }
        }.getIcon());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel32)
                .addGap(150, 150, 150)
                .addComponent(jLabel3)
                .addContainerGap(234, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void atualizarTabelaAnimais() {
        animalTableModel.setAnimais(listaDeAnimais); 
        dono.setListaAnimais((ArrayList<Animal>) listaDeAnimais);
    }
    
    private void agendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agendaActionPerformed
     int selectedRow = tabelaAnimais.getSelectedRow(); // obtém o índice da linha selecionada

    if (selectedRow != -1) { // verifica se alguma linha foi realmente selecionada
        AnimalTableModel model = (AnimalTableModel) tabelaAnimais.getModel();
        Animal pet = model.getAnimalAt(selectedRow); 
       
        StringBuilder cartao = new StringBuilder();
    cartao.append("Cartão de Vacina do ").append(pet.getNome())
          .append("\nTutor: ").append(pet.getTutor().getNome())
          .append("\n\n");

    if (pet.getListaVacinasAplicada().isEmpty()) {
        cartao.append("Este animal não possui vacinas cadastradas.");
    } else {
        for (VacinaAplicada vac : pet.getListaVacinasAplicada()) {
            cartao.append(vac.toString())
                  .append("\n------------------------------\n");
        }
    }

    JTextArea area = new JTextArea(cartao.toString());
    area.setEditable(false);
    area.setFont(new java.awt.Font("Monospaced", java.awt.Font.PLAIN, 13));
    JScrollPane scrollPane = new JScrollPane(area);
    scrollPane.setPreferredSize(new java.awt.Dimension(400, 300));

    JOptionPane.showMessageDialog(this, scrollPane, "Cartão de Vacina", JOptionPane.INFORMATION_MESSAGE);   
    
    } 
    else {
        JOptionPane.showMessageDialog(this, "Por favor, selecione um animal na tabela.");
    }    
    }//GEN-LAST:event_agendaActionPerformed

    private void VoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VoltarActionPerformed
        
        Window window = SwingUtilities.getWindowAncestor(this);

        if (window != null) {
            window.dispose(); // fecha a janela que contém esse painel
        }
         
        JFrame frame = new JFrame("Tela Tutor");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(800, 600);
        frame.setLocationRelativeTo(null);

        LoginTutor painel = new LoginTutor(petShop);
        frame.add(painel);

        frame.setVisible(true);
    }//GEN-LAST:event_VoltarActionPerformed

    private void VacinarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VacinarActionPerformed
        vacinasComboBox.removeAllItems();
        
        for(Vacina vacina: petShop.getListaVacinas()){
            vacinasComboBox.addItem(vacina.getNomeVacina());
        }
        
        estado = !estado;
        
        vacinasComboBox.setVisible(estado);
        vacinasComboBox.setEnabled(estado);

        aplicarVacinaJButton.setVisible(estado);
        aplicarVacinaJButton.setEnabled(estado);
        
        //vacinasComboBox.setLocation(vacinasComboBox.getX(), estado? editarButton.getY()+40 : editarButton.getY());
        //aplicarVacinaJButton.setLocation(aplicarVacinaJButton.getX(), estado? editarButton.getY() + 40 : editarButton.getY());
        jPanel2.repaint();
    }//GEN-LAST:event_VacinarActionPerformed

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
  
        int selectedRow = tabelaAnimais.getSelectedRow(); // obtém o índice da linha selecionada

        if (selectedRow != -1) { // verifica se alguma linha foi realmente selecionada
            AnimalTableModel model = (AnimalTableModel) tabelaAnimais.getModel();
            Animal animalSelecionado = model.getAnimalAt(selectedRow); 
            
            for(int i=0; i<listaDeAnimais.size(); i++){
                if(listaDeAnimais.get(i) == animalSelecionado){
                    String novoNome;
                    do {
                        novoNome = JOptionPane.showInputDialog(null, "Digite o novo nome do Animal:", "Entrada de Dados", JOptionPane.QUESTION_MESSAGE);
                        if(novoNome == null){
                            JOptionPane.showMessageDialog(null, "Operação cancelada pelo usuário");
                            return;
                        }

                        novoNome = novoNome.trim();
                    }while (novoNome.isEmpty());
                    
                    listaDeAnimais.get(i).setNome(novoNome);
                    atualizarTabelaAnimais();
                }
            }
        } 
        else {
            JOptionPane.showMessageDialog(this, "Por favor, selecione um animal na tabela.");
        }
    }//GEN-LAST:event_editarActionPerformed

    private void editarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarButtonActionPerformed

    }//GEN-LAST:event_editarButtonActionPerformed

    private void aplicarVacinaJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aplicarVacinaJButtonActionPerformed
        int selectedRow = tabelaAnimais.getSelectedRow(); // obtém o índice da linha selecionada

        if (selectedRow != -1) { // verifica se alguma linha foi realmente selecionada
            AnimalTableModel model = (AnimalTableModel) tabelaAnimais.getModel();
            Animal animalSelecionado = model.getAnimalAt(selectedRow);
            
            Vacina vacinaEmEstoque = petShop.buscarVacinaPorNome(vacinasComboBox.getSelectedItem().toString());
            
            if(vacinaEmEstoque == null){
                JOptionPane.showMessageDialog(this, "Vacina não encontrada no estoque da clínica.", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if(vacinaEmEstoque.getQuantidade() <= 0){
                JOptionPane.showMessageDialog(this, "Estoque da vacina " + vacinaEmEstoque.getNomeVacina() + " esgotado.", "Estoque Insuficiente", JOptionPane.WARNING_MESSAGE);
                return;
            }
            try {
                LocalDate dataMinistrada = LocalDate.now();
                
                if(animalSelecionado.podeProxDose(vacinaEmEstoque)){
                    LocalDate proxAplicacao = dataMinistrada; 

                    VacinaAplicada novaVacinaAplicada = new VacinaAplicada(
                        vacinaEmEstoque,
                        dataMinistrada,
                        proxAplicacao,
                        vacinaEmEstoque.getPreco() // preço da vacina no momento da aplicação
                        );
                    
                    animalSelecionado.addVacinaAplicada(novaVacinaAplicada);
                    vacinaEmEstoque.setQuantidade(vacinaEmEstoque.getQuantidade() - 1);
                    

                    JOptionPane.showMessageDialog(this, "Vacina '" + vacinaEmEstoque.getNomeVacina() + "' aplicada com sucesso ao animal " + animalSelecionado.getNome() + "!\n Valor pago será de: "+ vacinaEmEstoque.getPreco() + "\n" +
                                               "Quantidade restante no estoque: " + vacinaEmEstoque.getQuantidade());
                    
                    if(animalSelecionado.dosesTomadasDaVacina(novaVacinaAplicada) == vacinaEmEstoque.getDosesMinimas())
                    JOptionPane.showMessageDialog(
                            null,                          
                            "Animal " + animalSelecionado.getNome() + " tomou todas a última das doses mínimas de " + vacinaEmEstoque.getNomeVacina() + ".", 
                            "Doses mínimas preenchidas", 
                            JOptionPane.WARNING_MESSAGE 
                        );
                    }
                else{
                    JOptionPane.showMessageDialog(
                            null,                          
                            "Animal " + animalSelecionado.getNome() + " já tomou todas as doses mínimas de " + vacinaEmEstoque.getNomeVacina() + ".", 
                            "Doses mínimas preenchidas", 
                            JOptionPane.WARNING_MESSAGE 
                        );
                    }
                }catch(Exception e){
                    JOptionPane.showMessageDialog(this, "Erro ao aplicar vacina: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                }
                
        }
        else{
             JOptionPane.showMessageDialog(this, "Selecione um animal ", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_aplicarVacinaJButtonActionPerformed

    private void agendarConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agendarConsultaActionPerformed
        int selectedRow = tabelaAnimais.getSelectedRow(); // obtém o índice da linha selecionada

     if (selectedRow != -1) { // verifica se alguma linha foi realmente selecionada
      AnimalTableModel model = (AnimalTableModel) tabelaAnimais.getModel();
       Animal pet = model.getAnimalAt(selectedRow); 
       
       Window window = SwingUtilities.getWindowAncestor(this);

         if (window != null) {
           window.dispose(); // fecha a janela que contém esse painel
          }
         
        JFrame frame = new JFrame("Solicitar uma Consulta Agendada");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(800, 600);
        frame.setLocationRelativeTo(null); // centraliza

        Agendar painel = new Agendar (petShop, dono, pet);
        frame.add(painel);

        frame.setVisible(true);   
    
        } else {
          JOptionPane.showMessageDialog(this, "Por favor, selecione um animal na tabela.");
       }
    }//GEN-LAST:event_agendarConsultaActionPerformed

    private void solicitarConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solicitarConsultaActionPerformed
        
     int selectedRow = tabelaAnimais.getSelectedRow(); // obtém o índice da linha selecionada

     if (selectedRow != -1) { // verifica se alguma linha foi realmente selecionada
        AnimalTableModel model = (AnimalTableModel) tabelaAnimais.getModel();
        Animal pet = model.getAnimalAt(selectedRow); 
       
        Window window = SwingUtilities.getWindowAncestor(this);
        if(pet.getListaAgendamentos().isEmpty()){
            JOptionPane.showMessageDialog(this, "Animal não tem consultas agendadas.");
            return;
        }
        if (window != null) {
           window.dispose(); // fecha a janela que contém esse painel
        }
         
        JFrame frame = new JFrame("Solicitar uma Consulta Agendada");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(800, 600);
        frame.setLocationRelativeTo(null); // centraliza

        SolicitarConsulta painel = new SolicitarConsulta(petShop, dono, pet);
        frame.add(painel);

        frame.setVisible(true);   
    
        } else {
          JOptionPane.showMessageDialog(this, "Por favor, selecione um animal na tabela.");
       }

    }//GEN-LAST:event_solicitarConsultaActionPerformed

    private void CadastrarAnimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CadastrarAnimalActionPerformed
        Window window = SwingUtilities.getWindowAncestor(this); // 'this' é o painel onde está o botão

         if (window != null) {
           window.dispose(); // fecha a janela que contém esse painel
          }
         
        JFrame frame = new JFrame("ACadastrar Animal");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(800, 600);// ajusta tamanho da janela ao tamanho do painel e componentes
        frame.setLocationRelativeTo(null); // centraliza

        CadastrarAnimal painel = new CadastrarAnimal(petShop,dono);
        frame.add(painel);

        frame.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_CadastrarAnimalActionPerformed

    private void HistoricoAnimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistoricoAnimalActionPerformed
    int selectedRow = tabelaAnimais.getSelectedRow(); // obtém o índice da linha selecionada

    if (selectedRow != -1) { // verifica se alguma linha foi realmente selecionada
       AnimalTableModel model = (AnimalTableModel) tabelaAnimais.getModel();
       Animal pet = model.getAnimalAt(selectedRow); 
       
       Window window = SwingUtilities.getWindowAncestor(this);

        if (window != null) {
           window.dispose(); // fecha a janela que contém esse painel
        }
         
        JFrame frame = new JFrame("Mostrar o Historico do Animal");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(800, 600);
        frame.setLocationRelativeTo(null); // centraliza

        HistoricoAnimal painel = new HistoricoAnimal(petShop,pet,dono);
        frame.add(painel);

        frame.setVisible(true);   
    
    } 
    else {
        JOptionPane.showMessageDialog(this, "Por favor, selecione um animal na tabela.");
    }

    }//GEN-LAST:event_HistoricoAnimalActionPerformed

    private void proximasVacinasVacinarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proximasVacinasVacinarActionPerformed
        int selectedRow = tabelaAnimais.getSelectedRow(); // obtém o índice da linha selecionada

    if (selectedRow != -1) { // verifica se alguma linha foi realmente selecionada
        AnimalTableModel model = (AnimalTableModel) tabelaAnimais.getModel();
        Animal pet = model.getAnimalAt(selectedRow); 
        
        Window window = SwingUtilities.getWindowAncestor(this);

        if (window != null) {
           window.dispose(); // fecha a janela que contém esse painel
        }
         
        JFrame frame = new JFrame("Proximas Vacinas");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(800, 600);
        frame.setLocationRelativeTo(null); // centraliza

        ProxVacinasAnimal painel = new ProxVacinasAnimal(petShop,pet,dono);
        frame.add(painel);

        frame.setVisible(true); 
        }
        else {
            JOptionPane.showMessageDialog(this, "Por favor, selecione um animal na tabela.");
        }
    }//GEN-LAST:event_proximasVacinasVacinarActionPerformed

    private void removerAnimal1RemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerAnimal1RemoverActionPerformed
        int selectedRow = tabelaAnimais.getSelectedRow();
        
        if (selectedRow != -1) { // verifica se alguma linha foi realmente selecionada
            AnimalTableModel model = (AnimalTableModel) tabelaAnimais.getModel();
            Animal animalSelecionado = model.getAnimalAt(selectedRow); 
            
            
            Iterator<Animal>iterator = listaDeAnimais.iterator();
            
            while(iterator.hasNext()){
                Animal ani = iterator.next();
                
                if(ani == animalSelecionado){
                    iterator.remove();
                    atualizarTabelaAnimais();
                }
            }     
        } 
        else {
            JOptionPane.showMessageDialog(this, "Por favor, selecione um animal na tabela.");
        }
    }//GEN-LAST:event_removerAnimal1RemoverActionPerformed

    private void agendaAnimal1agendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agendaAnimal1agendaActionPerformed
       int selectedRow = tabelaAnimais.getSelectedRow(); // obtém o índice da linha selecionada

    if (selectedRow != -1) { // verifica se alguma linha foi realmente selecionada
        AnimalTableModel model = (AnimalTableModel) tabelaAnimais.getModel();
        Animal pet = model.getAnimalAt(selectedRow); 
       
        Window window = SwingUtilities.getWindowAncestor(this);

        if (window != null) {
            window.dispose(); // fecha a janela que contém esse painel
        }
         
        JFrame frame = new JFrame("Mostrar o Historico do Animal");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(800, 600);
        frame.setLocationRelativeTo(null); // centraliza

        AgendaAnimal painel = new AgendaAnimal(petShop,pet,dono);
        frame.add(painel);

        frame.setVisible(true);   
    
    } 
    else {
        JOptionPane.showMessageDialog(this, "Por favor, selecione um animal na tabela.");
    }
    }//GEN-LAST:event_agendaAnimal1agendaActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CadastrarAnimal;
    private javax.swing.JButton HistoricoAnimal;
    private javax.swing.JButton Voltar;
    private javax.swing.JButton agendaAnimal;
    private javax.swing.JButton agendaAnimal1;
    private javax.swing.JButton agendarConsulta;
    private javax.swing.JButton aplicarVacinaJButton;
    private javax.swing.JButton editarButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton proximasVacinas;
    private javax.swing.JButton removerAnimal1;
    private javax.swing.JButton solicitarConsulta;
    private javax.swing.JTable tabelaAnimais;
    private javax.swing.JButton vacinarButton;
    private javax.swing.JComboBox<String> vacinasComboBox;
    // End of variables declaration//GEN-END:variables
}
